var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Boot = xdc.useModule('ti.catalog.c2800.initF2837x.Boot');
var ti_sysbios_hal_Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Timer = xdc.useModule('ti.sysbios.family.c28.Timer');
var ti_sysbios_hal_Timer = xdc.useModule('ti.sysbios.hal.Timer');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x800;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x100;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

Boot.OSCCLK = 10;
BIOS.cpuFreq.lo = 200000000;
Boot.SYSCLKDIVSEL = 1;
Boot.SPLLIMULT = 40;
Task.defaultStackSize = 1024;
Boot.OSCCLKSRCSEL = Boot.OscClk_XTAL;
Clock.timerId = 2;
var task0Params = new Task.Params();
task0Params.instance.name = "lidar_sample_tsk_hdl";
task0Params.priority = 4;
Program.global.lidar_sample_tsk_hdl = Task.create("&lidar_sample_task", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "step_tsk_hdl";
task1Params.priority = 5;
Program.global.step_tsk_hdl = Task.create("&step_task", task1Params);
Boot.disableWatchdog = true;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi0";
Program.global.hwi0 = Hwi.create(35, "&ir_sensor_ISR", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi1";
Program.global.hwi1 = Hwi.create(88, "&i2c_handler_ISR", hwi1Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "i2c_tx_sem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.i2c_tx_sem = Semaphore.create(null, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "i2c_rx_sem";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.i2c_rx_sem = Semaphore.create(null, semaphore1Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "spi_tx_sem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.spi_tx_sem = Semaphore.create(null, semaphore2Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi2";
Program.global.hwi2 = Hwi.create(72, "&spi_handler_ISR", hwi2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "uart_tx_sem";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.uart_tx_sem = Semaphore.create(null, semaphore3Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "hwi3";
Program.global.hwi3 = Hwi.create(97, "&uart_tx_handler_ISR", hwi3Params);
var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "hwi4";
Program.global.hwi4 = Hwi.create(96, "&uart_rx_handler_ISR", hwi4Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "uart_rx_swi_hdl";
swi0Params.priority = 8;
Program.global.uart_rx_swi_hdl = Swi.create("&uart_rx_SWI", swi0Params);
var task2Params = new Task.Params();
task2Params.instance.name = "oled_display_tsk_hdl";
task2Params.priority = 3;
Program.global.oled_display_tsk_hdl = Task.create("&oled_display_task", task2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "pc_data_tx_tsk_hdl";
task3Params.priority = 6;
Program.global.pc_data_tx_tsk_hdl = Task.create("&pc_data_tx_task", task3Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "step_to_sample_sem";
semaphore5Params.mode = Semaphore.Mode_BINARY;
Program.global.step_to_sample_sem = Semaphore.create(null, semaphore5Params);
Clock.tickPeriod = 1000;
var semaphore5Params0 = new Semaphore.Params();
semaphore5Params0.instance.name = "sample_to_step_sem";
semaphore5Params0.mode = Semaphore.Mode_BINARY;
Program.global.sample_to_step_sem = Semaphore.create(null, semaphore5Params0);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "step_delay_sem";
semaphore6Params.mode = Semaphore.Mode_BINARY;
Program.global.step_delay_sem = Semaphore.create(null, semaphore6Params);
var ti_sysbios_hal_Timer0Params = new ti_sysbios_hal_Timer.Params();
ti_sysbios_hal_Timer0Params.instance.name = "delay_timer_hdl";
ti_sysbios_hal_Timer0Params.periodType = xdc.module("ti.sysbios.interfaces.ITimer").PeriodType_COUNTS;
ti_sysbios_hal_Timer0Params.period = 2000;
ti_sysbios_hal_Timer0Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
Program.global.delay_timer_hdl = ti_sysbios_hal_Timer.create(null, "&delay_timer_ISR", ti_sysbios_hal_Timer0Params);
var semaphore7Params = new Semaphore.Params();
semaphore7Params.instance.name = "lidar_sample_delay_sem";
semaphore7Params.mode = Semaphore.Mode_BINARY;
Program.global.lidar_sample_delay_sem = Semaphore.create(0, semaphore7Params);
var semaphore8Params = new Semaphore.Params();
semaphore8Params.instance.name = "zero_sem";
semaphore8Params.mode = Semaphore.Mode_BINARY;
Program.global.zero_sem = Semaphore.create(null, semaphore8Params);
